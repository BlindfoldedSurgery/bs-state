name: Workflow
on:
  push:
    branches: [ main ]
    tags:
      - v**
  pull_request: { }

jobs:
  required-meta:
    uses: BlindfoldedSurgery/actions-meta/.github/workflows/required.yml@v1

  check-commits:
    uses: BlindfoldedSurgery/actions-releases/.github/workflows/commitizen-check.yml@v3
    with:
      build-tool: uv
      python-version: '3.13'

  lint:
    strategy:
      fail-fast: false
      matrix:
        python-version: [ "3.11", "3.12", "3.13" ]
    uses: BlindfoldedSurgery/actions-python/.github/workflows/lint.yml@v4
    with:
      build-tool: uv
      python-version: ${{ matrix.python-version }}

  test:
    strategy:
      matrix:
        python-version: [ "3.11", "3.12", "3.13" ]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
      - uses: astral-sh/setup-uv@v5
      - name: Start minikube
        uses: medyagh/setup-minikube@latest
      - uses: actions/checkout@v4
      - run: uv sync --all-extras
      - name: Run tests
        if: matrix.python-version != '3.13'
        run: uv run pytest
      - name: Run tests with coverage
        if: matrix.python-version == '3.13'
        run: uv run pytest --cov src/
      - name: Convert Python coverage file format to XML
        if: matrix.python-version == '3.13'
        run: uv run coverage xml
      - name: Upload coverage reports to Codecov
        if: matrix.python-version == '3.13'
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage.xml

  bump:
    uses: BlindfoldedSurgery/actions-releases/.github/workflows/commitizen-bump.yml@v3
    needs:
      - lint
      - test
    secrets:
      GH_TOKEN: ${{ secrets.GH_PR_TOKEN }}
    with:
      build-tool: uv
      python-version: '3.13'

  publish_package:
    uses: BlindfoldedSurgery/actions-python/.github/workflows/publish-package.yml@v4
    needs:
      - lint
      - test
    if: success() && startsWith(github.ref, 'refs/tags/v')
    with:
      build-tool: uv
      python-version: '3.11'
      pypi-username: ${{ vars.PYPI_USERNAME }}
    secrets:
      pypi-password: ${{ secrets.PYPI_PASSWORD }}
